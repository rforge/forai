\name{train.svr}
\alias{train.svr}
%- Also NEED an '\alias' for EACH other topic documented here.
\title{Train SVR}
\description{Train SVR }
\usage{
train.svr(xtrain, ytrain, hypparameter, ErrorFunc, PercentValid = 20, 
          kfold = 1, SplitRandom = FALSE, kernel = "radial")
}
%- maybe also 'usage' for other objects documented here.
\arguments{
  \item{xtrain}{Data matrix (numeric) containing the input values (predictors) used to train
                    the model.}
  \item{ytrain}{Response vector (numeric) used to train the model.}
  \item{hypparameter}{Hyper-parameters of the model.}
  \item{ErrorFunc}{Error function to be minimized.}
  \item{PercentValid}{Percentage of the data reserved for validation. Default is \code{20}\%.}
  \item{kfold}{if a integer value k>1 is specified, a k-fold cross validation on the training data is performed. Default is \code{1}.}
  \item{SplitRandom}{Option whether to split the train set randomly. Default is \code{FALSE}.}
  \item{kernel}{Kernel function to be used. Default is \code{'radial'}.}
}
\details{
%%  ~~ If necessary, more details than the description above ~~
}
\value{
  \item{hypparameter}{Hyper-parameter of the best trained model.}
  \item{forecast}{A vector of predicted values generated by the best trained model.}
  \item{svmf}{An object of class "svm" containing the fitted model.}
  \item{ffTrain}{Error value of the training based on \code{ErrorFunc}. (It is \code{NULL} if \code{kfold > 1})}
  \item{ffValid}{Error value of the validation based on \code{ErrorFunc}.}
  \item{stepvars}{Variables selected by the prescreening methods when they are used.}
}
\references{
%% ~put references to the literature/web site here ~
}
\author{
%%  ~~who you are~~
}
\note{
%%  ~~further notes~~
}

%% ~Make other sections like Warning with \section{Warning }{....} ~

\seealso{
%% ~~objects to See Also as \code{\link{help}}, ~~~
}
\examples{
##---- Should be DIRECTLY executable !! ----
##-- ==>  Define data, use random,
##--	or do  help(data=index)  for the standard data sets.

## The function is currently defined as
function (xtrain, ytrain, hypparameter, ErrorFunc, PercentValid = 20, 
    kfold = 1, SplitRandom = FALSE, kernel = "radial") 
{
    if (kfold > 1) {
        n.cases = nrow(xtrain)
        index.block <- xval.buffer(n.cases, kfold)
        pred.valid <- rep(Inf, n.cases)
        for (nb in 1:kfold) {
            svr.try <- try(svm(xtrain[index.block[[nb]]$train, 
                , drop = FALSE], ytrain[index.block[[nb]]$train, 
                , drop = FALSE], kernel = kernel, gamma = hypparameter[1], 
                epsilon = hypparameter[2], cost = hypparameter[3]), 
                silent = TRUE)
            if (class(svr.try) != "try-error") {
                pred.valid[index.block[[nb]]$valid] = predict(svr.try, 
                  xtrain[index.block[[nb]]$valid, , drop = FALSE])
            }
            else {
                return(list(error.svm = TRUE))
            }
        }
        return(list(error.svm = FALSE, fitted = pred.valid, ffValid = ErrorFunc(ytrain, 
            pred.valid)))
    }
    else {
        nTrain = nrow(xtrain)
        indValid <- nTrain - round((nTrain * (PercentValid/100)))
        if (SplitRandom) {
            cases <- sample(nTrain)
            x.fit <- x.train[cases, , drop = FALSE]
            y.fit <- y.train[cases]
        }
        x.fit.train <- xtrain[1:indValid, , drop = FALSE]
        x.fit.valid <- xtrain[(indValid + 1):nTrain, , drop = FALSE]
        y.fit.train <- ytrain[1:indValid]
        y.fit.valid <- ytrain[(indValid + 1):nTrain]
        svr.try <- try(svm(x.fit.train, y.fit.train, kernel = "radial", 
            gamma = hypparameter[1], epsilon = hypparameter[2], 
            cost = hypparameter[3]), silent = TRUE)
        if (class(svr.try) != "try-error") {
            sv <- svr.try
            return(list(error.svm = FALSE, fitted.train = sv$fitted, 
                fitted.valid = predict(sv, x.fit.valid), ffValid = ErrorFunc(y.fit.valid, 
                  predict(sv, x.fit.valid)), ffTrain = ErrorFunc(y.fit.train, 
                  sv$fitted)))
        }
        else {
            return(list(error.svm = TRUE))
        }
    }
  }
}
% Add one or more standard keywords, see file 'KEYWORDS' in the
% R documentation directory.
\keyword{ ~kwd1 }
\keyword{ ~kwd2 }% __ONLY ONE__ keyword per line
